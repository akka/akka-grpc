package com.lightbend.grpc.interop

import scala.concurrent.ExecutionContext
import scala.concurrent.Future
import scala.reflect.ClassTag
import scala.collection.immutable
import akka.NotUsed
import akka.http.grpc._
import akka.stream.scaladsl.{ Flow, Source }
import akka.stream.Materializer
import com.google.protobuf.ByteString
import com.google.protobuf.empty.Empty

// Generated by our plugin
import io.grpc.testing.integration.test.TestServiceService
import io.grpc.testing.integration.messages._

object TestServiceImpl {
  val parametersToResponseFlow: Flow[ResponseParameters, StreamingOutputCallResponse, _] =
    Flow[ResponseParameters]
      .map { parameters =>
        StreamingOutputCallResponse(
          Some(Payload(body = ByteString.copyFrom(new Array[Byte](parameters.size)))))
      }
}

// Implementation of the generated interface
class TestServiceImpl(implicit ec: ExecutionContext, mat: Materializer) extends TestServiceService {
  import TestServiceImpl._

  override def emptyCall(req: Empty) = Future.successful(Empty())

  override def unaryCall(req: SimpleRequest): Future[SimpleResponse] = Future.successful(
    SimpleResponse(
      Some(Payload(req.responseType, ByteString.copyFrom(new Array[Byte](req.responseSize))))))
  override def cacheableUnaryCall(in: SimpleRequest): Future[SimpleResponse] = ???

  override def fullDuplexCall(in: Source[StreamingOutputCallRequest, _]): Source[StreamingOutputCallResponse, Any] =
    in.mapConcat(_.responseParameters.to[immutable.Seq]).via(parametersToResponseFlow)

  override def halfDuplexCall(in: Source[StreamingOutputCallRequest, _]): Source[StreamingOutputCallResponse, Any] = ???

  override def streamingInputCall(in: Source[StreamingInputCallRequest, _]): Future[StreamingInputCallResponse] = {
    in
      .map(_.payload.map(_.body.size).getOrElse(0))
      .runFold(0)(_ + _)
      .map { sum â‡’
        StreamingInputCallResponse(sum)
      }
  }
  override def streamingOutputCall(in: StreamingOutputCallRequest): Source[StreamingOutputCallResponse, Any] =
    Source(in.responseParameters.to[immutable.Seq]).via(parametersToResponseFlow)

  override def unimplementedCall(in: Empty): Future[Empty] = ???
}
