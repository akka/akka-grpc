@*
 * Copyright (C) 2018 Lightbend Inc. <https://www.lightbend.com>
 *@

@()
package akka.grpc.internal

import java.util.concurrent.Executor
import com.google.common.util.concurrent.{FutureCallback, Futures, ListenableFuture}
import scala.concurrent.{ExecutionContext, Future, Promise}
import akka.NotUsed
import akka.stream.scaladsl.Flow
import akka.stream.stage.{GraphStage, GraphStageLogic, _}
import akka.stream.{Attributes, FlowShape, Inlet, Outlet}
import akka.annotation.InternalApi
import io.grpc.stub.StreamObserver

/**
 * INTERNAL API
 * Include some helpers to convert types from Channel API to Scala / Akka Streams API
 */
@@InternalApi
object ChannelApiHelpers {

  /**
   * INTERNAL API
   *
   * Converts a Guava [[ListenableFuture]] to a Scala [[Future]]
   */
  @@InternalApi
  def toScalaFuture[A](guavaFuture: ListenableFuture[A])(implicit ec: ExecutionContext): Future[A] = {

    val p = Promise[A]()
    val callback = new FutureCallback[A] {
      override def onFailure(t: Throwable): Unit = p.failure(t)
      override def onSuccess(a: A): Unit = p.success(a)
    }

    val javaExecutor = ec match {
      case exc: Executor => exc // Akka Dispatcher is an Executor
      case _ =>
        new Executor {
          override def execute(command: Runnable): Unit = ec.execute(command)
        }
    }

    Futures.addCallback(guavaFuture, callback, javaExecutor)
    p.future
  }

 /**
  * INTERNAL API
  *
  * Builds a akka stream [[Flow]] from a function `StreamObserver[O] => StreamObserver[I]`
  */
  @@InternalApi
  def buildFlow[I, O](name: String)(operator: StreamObserver[O] => StreamObserver[I]): Flow[I, O, NotUsed] =
    Flow.fromGraph(new AkkaGrpcGraphStage(name, operator))

  @@InternalApi
  private class AkkaGrpcGraphStage[I, O](name: String, operator: StreamObserver[O] => StreamObserver[I]) extends GraphStage[FlowShape[I, O]] {

    val in = Inlet[I](name + ".in")
    val out = Outlet[O](name + ".out")

    override val shape: FlowShape[I, O] = FlowShape.of(in, out)

    override def createLogic(inheritedAttributes: Attributes): GraphStageLogic =
     new GraphStageLogic(shape) with InHandler with OutHandler {

       val onNextCb = getAsyncCallback[O](value => emit(out, value))

       val failCb = getAsyncCallback[Throwable](t â‡’ failStage(t))

       val responseObserver = new StreamObserver[O] {
         override def onError(t: Throwable) = failCb.invoke(t)
         override def onCompleted() = getAsyncCallback[Unit](_ => complete(out)).invoke(())
         override def onNext(value: O) = onNextCb.invoke(value)
       }

       val requestObserver = operator(responseObserver)

       override def preStart(): Unit = pull(in)

       override def onPush(): Unit = {
         val input = grab(in)
         requestObserver.onNext(input)
         pull(in)
       }

       override def onUpstreamFinish(): Unit = requestObserver.onCompleted()

       override def onUpstreamFailure(t: Throwable): Unit = requestObserver.onError(t)

       override def onPull(): Unit = ()

       setHandlers(in, out, this)
    }
  }
}
