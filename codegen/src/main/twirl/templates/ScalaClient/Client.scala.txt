@*
 * Copyright (C) 2018-2020 Lightbend Inc. <https://www.lightbend.com>
 *@

@(service: akka.grpc.gen.scaladsl.Service)

@akka.grpc.gen.Constants.DoNotEditComment
package @service.packageName

import scala.concurrent.ExecutionContext

import io.grpc.ManagedChannel
import io.grpc.MethodDescriptor

import akka.grpc.GrpcClientSettings

import akka.grpc.scaladsl.AkkaGrpcClient

import akka.grpc.internal.Marshaller
import akka.grpc.internal.NettyClientUtils
import akka.grpc.internal.ClientState

import akka.stream.ActorMaterializer
import akka.stream.Materializer

@{
  def withSingleResponse(stmt: String) = Set("import akka.grpc.scaladsl.SingleResponseRequestBuilder", stmt)
  def withStreamResponse(stmt: String) = Set("import akka.grpc.scaladsl.StreamResponseRequestBuilder", stmt)
  service.methods.toSet.flatMap { method: akka.grpc.gen.scaladsl.Method =>

    val statements = method.methodType match {
      case akka.grpc.gen.Unary => withSingleResponse("import akka.grpc.internal.ScalaUnaryRequestBuilder")
      case akka.grpc.gen.ClientStreaming =>  withSingleResponse("import akka.grpc.internal.ScalaClientStreamingRequestBuilder")
      case akka.grpc.gen.ServerStreaming => withStreamResponse("import akka.grpc.internal.ScalaServerStreamingRequestBuilder")
      case akka.grpc.gen.BidiStreaming => withStreamResponse("import akka.grpc.internal.ScalaBidirectionalStreamingRequestBuilder")
    }

    statements
  }.mkString("\n")
}

// Not sealed so users can extend to write their stubs
trait @{service.name}Client extends @{service.name} with @{service.name}ClientPowerApi with AkkaGrpcClient

object @{service.name}Client {
  def apply(settings: GrpcClientSettings)(implicit mat: Materializer, ex: ExecutionContext): @{service.name}Client =
    new Default@{service.name}Client(settings)
}

final class Default@{service.name}Client(settings: GrpcClientSettings)(implicit mat: Materializer, ex: ExecutionContext) extends @{service.name}Client {
  import Default@{service.name}Client._

  private val options = NettyClientUtils.callOptions(settings)
  private val clientState = new ClientState(settings, akka.event.Logging(mat.asInstanceOf[ActorMaterializer].system, this.getClass))

  @for(method <- service.methods) {
    private def @{method.name}RequestBuilder(channel:scala.concurrent.Future[ManagedChannel]) = {
      @if(method.methodType == akka.grpc.gen.Unary) {
        new ScalaUnaryRequestBuilder(@{method.name}Descriptor, channel, options, settings)
      } else {
        val fqName = "@{service.grpcName}.@{method.grpcName}"
        @if(method.methodType == akka.grpc.gen.ServerStreaming) {
          new ScalaServerStreamingRequestBuilder(@{method.name}Descriptor, fqName, channel, options, settings)
        } else if(method.methodType == akka.grpc.gen.ClientStreaming) {
          new ScalaClientStreamingRequestBuilder(@{method.name}Descriptor, fqName, channel, options, settings, mat)
        } else if (method.methodType == akka.grpc.gen.BidiStreaming) {
          new ScalaBidirectionalStreamingRequestBuilder(@{method.name}Descriptor, fqName, channel, options, settings)
        }
      }
    }
  }

  @for(method <- service.methods) {
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer @{method.name}(@method.parameterType) if possible.
     */
    @if(method.methodType == akka.grpc.gen.Unary || method.methodType == akka.grpc.gen.ClientStreaming) {
      override def @{method.name}(): SingleResponseRequestBuilder[@method.parameterType, @method.outputTypeUnboxed] =
        clientState.withChannel(@{method.name}RequestBuilder _)
    } else {
      override def @{method.name}(): StreamResponseRequestBuilder[@method.parameterType, @method.outputTypeUnboxed] =
        clientState.withChannel(@{method.name}RequestBuilder _)
    }

    /**
     * For access to method metadata use the parameterless version of @{method.name}
     */
    def @{method.name}(in: @method.parameterType): @method.returnType =
      @{method.name}().invoke(in)
  }

  override def close(): scala.concurrent.Future[akka.Done] = clientState.close()
  override def closed(): scala.concurrent.Future[akka.Done] = clientState.closed()

}

@mapMethodType(methodType: akka.grpc.gen.MethodType) = {
  @if(methodType == akka.grpc.gen.Unary) { MethodDescriptor.MethodType.UNARY }
  @if(methodType == akka.grpc.gen.ClientStreaming) {MethodDescriptor.MethodType.CLIENT_STREAMING }
  @if(methodType == akka.grpc.gen.ServerStreaming) { MethodDescriptor.MethodType.SERVER_STREAMING }
  @if(methodType == akka.grpc.gen.BidiStreaming) {MethodDescriptor.MethodType.BIDI_STREAMING }
}

private object Default@{service.name}Client {

  def apply(settings: GrpcClientSettings)(implicit mat: Materializer, ex: ExecutionContext): @{service.name}Client =
    new Default@{service.name}Client(settings)

  import @{service.name}.Serializers._

  @for(method <- service.methods) {
    private val @{method.name}Descriptor: MethodDescriptor[@method.inputTypeUnboxed, @method.outputTypeUnboxed] =
      MethodDescriptor.newBuilder()
        .setType(@mapMethodType(method.methodType))
        .setFullMethodName(MethodDescriptor.generateFullMethodName("@service.grpcName", "@method.grpcName"))
        .setRequestMarshaller(new Marshaller(@method.deserializer.name))
        .setResponseMarshaller(new Marshaller(@method.serializer.name))
        .setSampledToLocalTracing(true)
        .build()
  }
}

trait @{service.name}ClientPowerApi {
  @for(method <- service.methods) {
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer @{method.name}(@method.parameterType) if possible.
     */
    @if(method.methodType == akka.grpc.gen.Unary || method.methodType == akka.grpc.gen.ClientStreaming) {
      def @{method.name}(): SingleResponseRequestBuilder[@method.parameterType, @method.outputTypeUnboxed] = ???
    } else {
      def @{method.name}(): StreamResponseRequestBuilder[@method.parameterType, @method.outputTypeUnboxed] = ???
    }
  }

}
