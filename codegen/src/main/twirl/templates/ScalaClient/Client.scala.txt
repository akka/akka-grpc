@*
 * Copyright (C) 2018-2023 Lightbend Inc. <https://www.lightbend.com>
 *@

@(service: akka.grpc.gen.scaladsl.Service)

@akka.grpc.gen.Constants.DoNotEditComment
package @service.packageName

import scala.concurrent.ExecutionContext

import akka.actor.ClassicActorSystemProvider

import akka.grpc.GrpcChannel
import akka.grpc.GrpcClientCloseException
import akka.grpc.GrpcClientSettings

import akka.grpc.scaladsl.AkkaGrpcClient

import akka.grpc.internal.NettyClientUtils

import akka.grpc.AkkaGrpcGenerated

@{
  def withSingleResponse(stmt: String) = Set("import akka.grpc.scaladsl.SingleResponseRequestBuilder", stmt)
  def withStreamResponse(stmt: String) = Set("import akka.grpc.scaladsl.StreamResponseRequestBuilder", stmt)
  service.methods.flatMap { method: akka.grpc.gen.scaladsl.Method =>

    val statements = method.methodType match {
      case akka.grpc.gen.Unary => withSingleResponse("import akka.grpc.internal.ScalaUnaryRequestBuilder")
      case akka.grpc.gen.ClientStreaming =>  withSingleResponse("import akka.grpc.internal.ScalaClientStreamingRequestBuilder")
      case akka.grpc.gen.ServerStreaming => withStreamResponse("import akka.grpc.internal.ScalaServerStreamingRequestBuilder")
      case akka.grpc.gen.BidiStreaming => withStreamResponse("import akka.grpc.internal.ScalaBidirectionalStreamingRequestBuilder")
    }

    statements
  }.distinct.mkString("\n")
}

// Not sealed so users can extend to write their stubs
@@AkkaGrpcGenerated
trait @{service.name}Client extends @{service.name} with @{service.name}ClientPowerApi with AkkaGrpcClient

@@AkkaGrpcGenerated
object @{service.name}Client {
  def apply(settings: GrpcClientSettings)(implicit sys: ClassicActorSystemProvider): @{service.name}Client =
    new Default@{service.name}Client(GrpcChannel(settings), isChannelOwned = true)
  def apply(channel: GrpcChannel)(implicit sys: ClassicActorSystemProvider): @{service.name}Client =
    new Default@{service.name}Client(channel, isChannelOwned = false)

  private class Default@{service.name}Client(channel: GrpcChannel, isChannelOwned: Boolean)(implicit sys: ClassicActorSystemProvider) extends @{service.name}Client {
    import @{service.name}.MethodDescriptors._

    private implicit val ex: ExecutionContext = sys.classicSystem.dispatcher
    private val settings = channel.settings
    private val options = NettyClientUtils.callOptions(settings)

    @for(method <- service.methods) {
    private def @{method.name}RequestBuilder(channel: akka.grpc.internal.InternalChannel) =
    @if(method.methodType == akka.grpc.gen.Unary) {
      new ScalaUnaryRequestBuilder(@{method.name}Descriptor, channel, options, settings)
    } else {
      @if(method.methodType == akka.grpc.gen.ServerStreaming) {
      new ScalaServerStreamingRequestBuilder(@{method.name}Descriptor, channel, options, settings)
      } else if(method.methodType == akka.grpc.gen.ClientStreaming) {
      new ScalaClientStreamingRequestBuilder(@{method.name}Descriptor, channel, options, settings)
      } else if (method.methodType == akka.grpc.gen.BidiStreaming) {
      new ScalaBidirectionalStreamingRequestBuilder(@{method.name}Descriptor, channel, options, settings)
      }
    }
    }

    @for(method <- service.methods) {
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer @{method.nameSafe}(@method.parameterType) if possible.
     */
    @if(method.methodType == akka.grpc.gen.Unary || method.methodType == akka.grpc.gen.ClientStreaming) {
    override def @{method.nameSafe}(): SingleResponseRequestBuilder[@method.parameterType, @method.outputTypeUnboxed] =
      @{method.name}RequestBuilder(channel.internalChannel)
    } else {
    override def @{method.nameSafe}(): StreamResponseRequestBuilder[@method.parameterType, @method.outputTypeUnboxed] =
      @{method.name}RequestBuilder(channel.internalChannel)
    }

    /**
     * For access to method metadata use the parameterless version of @{method.nameSafe}
     */
    def @{method.nameSafe}(in: @method.parameterType): @method.returnType =
      @{method.nameSafe}().invoke(in)
    }

    override def close(): scala.concurrent.Future[akka.Done] =
      if (isChannelOwned) channel.close()
      else throw new GrpcClientCloseException()

    override def closed: scala.concurrent.Future[akka.Done] = channel.closed()
  }
}

@@AkkaGrpcGenerated
trait @{service.name}ClientPowerApi {
  @for(method <- service.methods) {
  /**
   * Lower level "lifted" version of the method, giving access to request metadata etc.
   * prefer @{method.nameSafe}(@method.parameterType) if possible.
   */
  @if(method.methodType == akka.grpc.gen.Unary || method.methodType == akka.grpc.gen.ClientStreaming) {
  def @{method.nameSafe}(): SingleResponseRequestBuilder[@method.parameterType, @method.outputTypeUnboxed] = ???
  } else {
  def @{method.nameSafe}(): StreamResponseRequestBuilder[@method.parameterType, @method.outputTypeUnboxed] = ???
  }
  }

}
