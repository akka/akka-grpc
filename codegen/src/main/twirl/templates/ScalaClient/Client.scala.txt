@*
 * Copyright (C) 2018 Lightbend Inc. <https://www.lightbend.com>
 *@

@(service: akka.grpc.gen.scaladsl.Service)

package @service.packageName

import akka.NotUsed
import akka.grpc.internal.{ ChannelApiHelpers, Marshaller }
import akka.grpc.GrpcClientSettings
import akka.stream.{ Materializer, OverflowStrategy }
import akka.stream.scaladsl.{ Flow, Sink, Source }
import akka.stream.Materializer
import scala.concurrent.{ ExecutionContext, Future }

import io.grpc._
import io.grpc.stub.{ ClientCalls, StreamObserver }
import @{service.name}Client._

class @{service.name}Client(settings: GrpcClientSettings)(implicit mat: Materializer, ex: ExecutionContext) extends @{service.name} {
  import @{service.name}Client._

  val channel = {
    import io.grpc.ManagedChannel
    import io.grpc.netty.shaded.io.grpc.netty.{ GrpcSslContexts, NegotiationType, NettyChannelBuilder }
    import io.grpc.netty.shaded.io.netty.handler.ssl.SslContext

    var builder =
      NettyChannelBuilder
        .forAddress(settings.host, settings.port)
        .flowControlWindow(65 * 1024)

    builder = settings.certificate.map(c => GrpcSslContexts.forClient.trustManager(loadCert(c)).build)
        .map(ctx => builder.negotiationType(NegotiationType.TLS).sslContext(ctx))
        .getOrElse(builder.negotiationType(NegotiationType.PLAINTEXT))
    builder = settings.overrideAuthority
        .map(builder.overrideAuthority(_)).getOrElse(builder)

    builder.build
  }
  val options = settings.options.getOrElse(CallOptions.DEFAULT)

  @for(method <- service.methods) {
  def @{method.name}(in: @method.parameterType): @method.returnType = {
  @if(method.methodType == akka.grpc.gen.Unary) {
    ChannelApiHelpers.toScalaFuture(
      ClientCalls.futureUnaryCall(channel.newCall(@{method.name}Descriptor, options), in)
    )
  }
  @if(method.methodType == akka.grpc.gen.ServerStreaming){
      val name = "@{service.grpcName}.@{method.grpcName}"
      val flow =
        ChannelApiHelpers.buildFlow[@method.inputTypeUnboxed, @method.outputTypeUnboxed](name) { responseObserver =>
          new StreamObserver[@method.inputTypeUnboxed] {
            override def onError(t: Throwable): Unit = responseObserver.onError(t)
            override def onCompleted(): Unit = ()
            override def onNext(request: @method.inputTypeUnboxed): Unit =
              ClientCalls.asyncServerStreamingCall(
                channel.newCall(@{method.name}Descriptor, options),
                request,
                responseObserver)
          }
        }



    val bufferSize = options.getOption(CallOptions.Key.of("buffer_size", 10000))
    Source
      .single(in)
      // channel calls don't support back-pressure so we need to buffered it
      // and eventually fail the stream
      .via(flow.buffer(bufferSize, OverflowStrategy.fail))
  }
  @if(method.methodType == akka.grpc.gen.ClientStreaming){
    val name = "@{service.grpcName}.@{method.grpcName}"
    val flow =
      ChannelApiHelpers.buildFlow[@method.inputTypeUnboxed, @method.outputTypeUnboxed](name)  { responseObserver =>
        ClientCalls.asyncClientStreamingCall(
          channel.newCall(@{method.name}Descriptor, options),
          responseObserver)
      }
    in.via(flow).runWith(Sink.head)
  }
  @if(method.methodType == akka.grpc.gen.BidiStreaming){
    val name = "@{service.grpcName}.@{method.grpcName}"
    val flow =
      ChannelApiHelpers.buildFlow[@method.inputTypeUnboxed, @method.outputTypeUnboxed](name) { responseObserver =>
        ClientCalls.asyncBidiStreamingCall(
          channel.newCall(@{method.name}Descriptor, options),
          responseObserver)
      }
    in.via(flow)
  }
  }
  }

  // TODO perhaps return Future[Done]?
  def close(): Unit = channel.shutdown()


}

@mapMethodType(methodType: akka.grpc.gen.MethodType) = {
  @if(methodType == akka.grpc.gen.Unary) { MethodDescriptor.MethodType.UNARY }
  @if(methodType == akka.grpc.gen.ClientStreaming) {MethodDescriptor.MethodType.CLIENT_STREAMING }
  @if(methodType == akka.grpc.gen.ServerStreaming) { MethodDescriptor.MethodType.SERVER_STREAMING }
  @if(methodType == akka.grpc.gen.BidiStreaming) {MethodDescriptor.MethodType.BIDI_STREAMING }
}

object @{service.name}Client {

  import @{service.name}.Serializers._

  def apply(settings: GrpcClientSettings)(implicit mat: Materializer, ex: ExecutionContext) =
    new @{service.name}Client(settings)


  @for(method <- service.methods) {
  val @{method.name}Descriptor: MethodDescriptor[@method.inputTypeUnboxed, @method.outputTypeUnboxed] =
    MethodDescriptor.newBuilder()
      .setType(@mapMethodType(method.methodType))
      .setFullMethodName(MethodDescriptor.generateFullMethodName("@service.grpcName", "@method.grpcName"))
      .setRequestMarshaller(new Marshaller(@method.deserializer.name))
      .setResponseMarshaller(new Marshaller(@method.serializer.name))
      .build()
  }

  private def loadCert(name: String) = {
    import java.io._

    val in = new BufferedInputStream(this.getClass.getResourceAsStream("/certs/" + name))
    val inBytes: Array[Byte] = {
      val baos = new ByteArrayOutputStream(math.max(64, in.available()))
      val buffer = Array.ofDim[Byte](32 * 1024)

      var bytesRead = in.read(buffer)
      while (bytesRead >= 0) {
        baos.write(buffer, 0, bytesRead)
        bytesRead = in.read(buffer)
      }
      baos.toByteArray
    }

    val tmpFile = File.createTempFile(name, "")
    tmpFile.deleteOnExit()

    val out = new BufferedOutputStream(new FileOutputStream(tmpFile))
    out.write(inBytes)
    out.close()

    tmpFile
  }
}
