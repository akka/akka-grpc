@*
 * Copyright (C) 2018 Lightbend Inc. <https://www.lightbend.com>
 *@

@(service: akka.grpc.gen.scaladsl.Service)

package @service.packageName

import javax.inject._

import scala.concurrent.Future

import akka.http.scaladsl.model.{HttpRequest, HttpResponse}
import akka.stream.Materializer

import play.api.mvc._
import play.api.mvc.akkahttp.AkkaHttpHandler
import play.api.routing.{Router, SimpleRouter}
import play.api.routing.Router.Routes

@@Singleton
class @{service.name}Router(impl: controllers.@{service.name}Impl, prefix: String)(implicit mat: Materializer)
  extends SimpleRouter {
  require(prefix != null && !prefix.isEmpty && prefix.charAt(0) == '/')

  @@Inject()
  def this(impl: controllers.@{service.name}Impl)(implicit mat: Materializer) =
    this(impl, "/" + @{service.name}.name)

  protected val handler = new AkkaHttpHandler {
    val h = @{service.name}Handler(impl, prefix)
    override def apply(request: HttpRequest): Future[HttpResponse] = h(request)
  }

  // could look at @{service.name}.name, but isn't this already covered in the route file?
  override def routes: Routes = {
    case rh if rh.path.startsWith(prefix) â‡’ handler
  }

  override def documentation: Seq[(String, String, String)] = Seq.empty

  override def withPrefix(newPrefix: String): Router = {
    if (newPrefix == "/") this
    else new @{service.name}Router(impl, newPrefix)
  }

}
