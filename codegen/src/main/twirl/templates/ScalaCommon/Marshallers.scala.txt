@*
 * Copyright (C) 2018-2020 Lightbend Inc. <https://www.lightbend.com>
 *@

@(service: akka.grpc.gen.scaladsl.Service)

@akka.grpc.gen.Constants.DoNotEditComment
package @service.packageName

import scala.concurrent.ExecutionContext

import akka.actor.ActorSystem
import akka.stream.Materializer
import akka.grpc.GrpcProtocol.GrpcProtocolWriter
import akka.grpc.ProtobufSerializer
import akka.grpc.scaladsl.GrpcMarshalling
import akka.http.scaladsl.marshalling.Marshaller
import akka.http.scaladsl.marshalling.ToResponseMarshaller
import akka.http.scaladsl.model.HttpRequest
import akka.http.scaladsl.unmarshalling.FromRequestUnmarshaller
import akka.http.scaladsl.unmarshalling.Unmarshaller

object @{service.name}Marshallers {
  @for(serializer <- service.serializers) {
  implicit val @serializer.name = @{service.packageName}.@{service.name}.Serializers.@{serializer.name}
  }

  implicit def unmarshaller[T](implicit serializer: ProtobufSerializer[T], mat: Materializer): FromRequestUnmarshaller[T] =
    Unmarshaller((_: ExecutionContext) => (req: HttpRequest) => GrpcMarshalling.unmarshal(req)(serializer, mat))

  implicit def toSourceUnmarshaller[T](implicit serializer: ProtobufSerializer[T], mat: Materializer): FromRequestUnmarshaller[akka.stream.scaladsl.Source[T, akka.NotUsed]] =
    Unmarshaller((_: ExecutionContext) => (req: HttpRequest) => GrpcMarshalling.unmarshalStream(req)(serializer, mat))

  implicit def marshaller[T](implicit serializer: ProtobufSerializer[T], writer: GrpcProtocolWriter, system: ActorSystem): ToResponseMarshaller[T] =
    Marshaller.opaque((response: T) => GrpcMarshalling.marshal(response)(serializer, writer, system))

  implicit def fromSourceMarshaller[T](implicit serializer: ProtobufSerializer[T], writer: GrpcProtocolWriter, system: ActorSystem): ToResponseMarshaller[akka.stream.scaladsl.Source[T, akka.NotUsed]] =
    Marshaller.opaque((response: akka.stream.scaladsl.Source[T, akka.NotUsed]) => GrpcMarshalling.marshalStream(response)(serializer, writer, system))
}
