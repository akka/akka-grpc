@(service: akka.http.grpc.Service)

package @service.packageName

import akka.NotUsed
import akka.http.grpc.internal.{ ChannelApiHelpers, Marshaller }
import akka.stream.{ Materializer, OverflowStrategy }
import akka.stream.scaladsl.{ Flow, Sink, Source }
import akka.stream.Materializer
import scala.concurrent.{ ExecutionContext, Future }

import io.grpc._
import io.grpc.stub.{ ClientCalls, StreamObserver }
import @{service.name}Client._


class @{service.name}Client(channel: Channel, options: CallOptions)(implicit mat: Materializer, ex: ExecutionContext) extends @{service.name} {

  @for(method <- service.methods) {
  def @{method.name}(in: @method.parameterType): @method.returnType = {
  @if(method.methodType == akka.http.grpc.Unary) {
    ChannelApiHelpers.toScalaFuture(
      ClientCalls.futureUnaryCall(channel.newCall(@{method.name}Descriptor, options), in)
    )
  }
  @if(method.methodType == akka.http.grpc.ServerStreaming){
      val name = "@{service.grpcName}.@{method.grpcName}"
      val flow =
        ChannelApiHelpers.buildFlow[@method.inputTypeUnboxed, @method.outputTypeUnboxed](name) { outputObserver =>
          new StreamObserver[@method.inputTypeUnboxed] {
            override def onError(t: Throwable): Unit = outputObserver.onError(t)
            override def onCompleted(): Unit = ()
            override def onNext(request: @method.inputTypeUnboxed): Unit =
              ClientCalls.asyncServerStreamingCall(
                channel.newCall(@{method.name}Descriptor, options),
                request,
                outputObserver)
          }
        }



    val bufferSize = options.getOption(CallOptions.Key.of("buffer_size", 10000))
    Source
      .single(in)
      // channel calls don't support back-pressure so we need to buffered it
      // and eventually fail the stream
      .via(flow.buffer(bufferSize, OverflowStrategy.fail))
  }
  @if(method.methodType == akka.http.grpc.ClientStreaming){
    val name = "@{service.grpcName}.@{method.grpcName}"
    val flow =
      ChannelApiHelpers.buildFlow[@method.inputTypeUnboxed, @method.outputTypeUnboxed](name)  { outputObserver =>
        ClientCalls.asyncClientStreamingCall(
          channel.newCall(@{method.name}Descriptor, options),
          outputObserver)
      }
    in.via(flow).runWith(Sink.head)
  }
  @if(method.methodType == akka.http.grpc.BidiStreaming){
    val name = "@{service.grpcName}.@{method.grpcName}"
    val flow =
      ChannelApiHelpers.buildFlow[@method.inputTypeUnboxed, @method.outputTypeUnboxed](name) { outputObserver =>
        ClientCalls.asyncBidiStreamingCall(
          channel.newCall(@{method.name}Descriptor, options),
          outputObserver)
      }
    in.via(flow)
  }
  }
  }
}

@mapMethodType(methodType: akka.http.grpc.MethodType) = {
  @if(methodType == akka.http.grpc.Unary) { MethodDescriptor.MethodType.UNARY }
  @if(methodType == akka.http.grpc.ClientStreaming) {MethodDescriptor.MethodType.CLIENT_STREAMING }
  @if(methodType == akka.http.grpc.ServerStreaming) { MethodDescriptor.MethodType.SERVER_STREAMING }
  @if(methodType == akka.http.grpc.BidiStreaming) {MethodDescriptor.MethodType.BIDI_STREAMING }
}

object @{service.name}Client {

  import @{service.name}.Serializers._

  def apply(channel: Channel)(implicit mat: Materializer, ex: ExecutionContext) =
    new @{service.name}Client(channel, CallOptions.DEFAULT)


  @for(method <- service.methods) {
  val @{method.name}Descriptor: MethodDescriptor[@method.inputTypeUnboxed, @method.outputTypeUnboxed] =
    MethodDescriptor.newBuilder()
      .setType(@mapMethodType(method.methodType))
      .setFullMethodName(MethodDescriptor.generateFullMethodName("@service.grpcName", "@method.grpcName"))
      .setRequestMarshaller(new Marshaller(@method.deserializer.name))
      .setResponseMarshaller(new Marshaller(@method.serializer.name))
      .build()
  }

}
