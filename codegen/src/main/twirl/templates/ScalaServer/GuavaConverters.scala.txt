@()
package akka.http.grpc

import java.util.concurrent.Executor
import com.google.common.util.concurrent.{FutureCallback, Futures, ListenableFuture}
import scala.concurrent.{ExecutionContext, Future, Promise}


object GuavaConverters {
  def toScalaFuture[A](guavaFuture: ListenableFuture[A])(implicit ex: ExecutionContext): Future[A] = {

    val p = Promise[A]()
    val callback = new FutureCallback[A] {
      override def onFailure(t: Throwable): Unit = p.failure(t)
      override def onSuccess(a: A): Unit = p.success(a)
    }

    val javaExecutor = new Executor {
      override def execute(command: Runnable): Unit = ex.execute(command)
    }

    Futures.addCallback(guavaFuture, callback, javaExecutor)
    p.future
  }

}

