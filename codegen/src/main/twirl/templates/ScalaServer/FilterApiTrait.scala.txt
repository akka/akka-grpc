@*
 * Copyright (C) 2018-2021 Lightbend Inc. <https://www.lightbend.com>
 *@

@(service: akka.grpc.gen.scaladsl.Service, powerApis: Boolean)

@akka.grpc.gen.Constants.DoNotEditComment
package @service.packageName

import scala.concurrent.ExecutionContext
@if(powerApis){import akka.grpc.scaladsl.Metadata}
/*
 * Generated by Akka gRPC. DO NOT EDIT.
 */
object @{service.name}Filter@(if(powerApis) {"Power"} else {""})Api {

  trait GenericFilter[In, Out] {
    def apply(request: @if(powerApis) {(In, Metadata)} else {In}, next: @if(powerApis) {(In, Metadata)} else {In} => Out)(implicit ex: ExecutionContext) : Out
  }
  def compose[In, Out](request: @if(powerApis) {(In, Metadata)} else {In}, filter: Seq[GenericFilter[In, Out]], client: @if(powerApis) {(In, Metadata)} else {In} => Out)(implicit ex: ExecutionContext): Out = {
    filter match {
      case Nil => client(@if(powerApis){request._1, request._2} else {request})
      case head :: Nil => head(request, client)(ex)
      case head :: tail =>
        @if(powerApis){
        val next: (In, Metadata) => Out = (req, meta) => compose((req, meta), tail, client)
        } else {
        val next: In => Out = req => compose(req, tail, client)
        }
        head(request, next)(ex)
    }
  }
}
