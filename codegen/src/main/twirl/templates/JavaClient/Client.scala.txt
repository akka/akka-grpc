@*
 * Copyright (C) 2018 Lightbend Inc. <https://www.lightbend.com>
 *@

@(service: akka.grpc.gen.javadsl.Service)

package @service.packageName;

import akka.NotUsed;
import akka.grpc.internal.ProtoMarshaller;
import akka.grpc.internal.NettyClientUtils;
import akka.grpc.internal.JavaUnaryRequestBuilder;
import akka.grpc.internal.JavaClientStreamingRequestBuilder;
import akka.grpc.internal.JavaServerStreamingRequestBuilder;
import akka.grpc.internal.JavaBidirectionalStreamingRequestBuilder;
import akka.grpc.GrpcClientSettings;
import akka.grpc.javadsl.SingleResponseRequestBuilder;
import akka.grpc.javadsl.StreamResponseRequestBuilder;
import akka.stream.Materializer;
import akka.stream.OverflowStrategy;
import akka.stream.javadsl.Flow;
import akka.stream.javadsl.Sink;
import akka.stream.javadsl.Source;
import akka.stream.Materializer;

import io.grpc.*;
import io.grpc.stub.*;

import static @{service.packageName}.@{service.name}.Serializers.*;


import java.util.concurrent.CompletionStage;

import scala.concurrent.ExecutionContext;


public final class @{service.name}Client implements @{service.name} {

  private final ManagedChannel channel;
  @for(method <- service.methods) {
    @if(method.methodType == akka.grpc.gen.Unary) {
      private final SingleResponseRequestBuilder<@method.inputTypeUnboxed, @method.outputTypeUnboxed> @{method.name}RequestBuilder;
    } else if(method.methodType == akka.grpc.gen.ClientStreaming){
      private final SingleResponseRequestBuilder<Source<@method.inputTypeUnboxed, NotUsed>, @method.outputTypeUnboxed> @{method.name}RequestBuilder;
    } else if(method.methodType == akka.grpc.gen.ServerStreaming){
      private final StreamResponseRequestBuilder<@method.inputTypeUnboxed, @method.outputTypeUnboxed> @{method.name}RequestBuilder;
    } else if(method.methodType == akka.grpc.gen.BidiStreaming){
      private final StreamResponseRequestBuilder<Source<@method.inputTypeUnboxed, NotUsed>, @method.outputTypeUnboxed> @{method.name}RequestBuilder;
    }
  }

  private @{service.name}Client(GrpcClientSettings settings, Materializer mat, ExecutionContext ec) {
    this.channel = NettyClientUtils.createChannel(settings);
    final CallOptions defaultOptions;
    if (settings.options().isDefined()) {
      defaultOptions = settings.options().get();
    } else {
      defaultOptions = CallOptions.DEFAULT;
    }

    @for(method <- service.methods) {
      @if(method.methodType == akka.grpc.gen.Unary) {
        @{method.name}RequestBuilder = new JavaUnaryRequestBuilder<>(@{method.name}Descriptor, channel, defaultOptions);
      } else {
        @defining(service.grpcName + "." + method.grpcName){ fqName =>
          @if(method.methodType == akka.grpc.gen.ClientStreaming){
            @{method.name}RequestBuilder = new JavaClientStreamingRequestBuilder<>(
              @{method.name}Descriptor, "@fqName", channel, defaultOptions, mat);
          } else if(method.methodType == akka.grpc.gen.ServerStreaming){
            @{method.name}RequestBuilder = new JavaServerStreamingRequestBuilder<>(
              @{method.name}Descriptor, "@fqName", channel, defaultOptions);
          } else if(method.methodType == akka.grpc.gen.BidiStreaming){
            @{method.name}RequestBuilder = new JavaBidirectionalStreamingRequestBuilder<>(
              @{method.name}Descriptor, "@fqName", channel, defaultOptions);
          }
        }
      }
    }
  }

  public static @{service.name}Client create(GrpcClientSettings settings, Materializer mat, ExecutionContext ex) {
    return new @{service.name}Client(settings, mat, ex);
  }

  @for(method <- service.methods) {

    /**
     * For access to method metadata use the parameterless version of @{method.name}
     */
    public @{method.getReturnType} @{method.name}(@{method.getParameterType} request) {
      return @{method.name}().invoke(request);
    }

    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer @{method.name}(@method.inputTypeUnboxed) if possible.
     */
    @if(method.methodType == akka.grpc.gen.Unary) {
      public SingleResponseRequestBuilder<@method.inputTypeUnboxed, @method.outputTypeUnboxed> @{method.name}()
    }else if(method.methodType == akka.grpc.gen.ClientStreaming){
      public SingleResponseRequestBuilder<Source<@method.inputTypeUnboxed, NotUsed>, @method.outputTypeUnboxed> @{method.name}()
    }else if(method.methodType == akka.grpc.gen.ServerStreaming){
      public StreamResponseRequestBuilder<@method.inputTypeUnboxed, @method.outputTypeUnboxed> @{method.name}()
    }else if(method.methodType == akka.grpc.gen.BidiStreaming){
      public StreamResponseRequestBuilder<Source<@method.inputTypeUnboxed, NotUsed>, @method.outputTypeUnboxed> @{method.name}()
    }
    {
      return @{method.name}RequestBuilder;
    }
  }

  @for(method <- service.methods) {
    private static MethodDescriptor<@method.inputTypeUnboxed, @method.outputTypeUnboxed> @{method.name}Descriptor =
      MethodDescriptor.<@method.inputTypeUnboxed, @method.outputTypeUnboxed>newBuilder()
        .setType(@mapMethodType(method.methodType))
        .setFullMethodName(MethodDescriptor.generateFullMethodName("@service.grpcName", "@method.grpcName"))
        .setRequestMarshaller(new ProtoMarshaller<@method.inputTypeUnboxed>(@method.deserializer.name))
        .setResponseMarshaller(new ProtoMarshaller<@method.outputTypeUnboxed>(@method.serializer.name))
        .build();
    }

  // TODO perhaps return CompletionStage[Done]?
  public void close() {
    channel.shutdown();
  }
}

@mapMethodType(methodType: akka.grpc.gen.MethodType) = {
  @if(methodType == akka.grpc.gen.Unary) { MethodDescriptor.MethodType.UNARY }
  @if(methodType == akka.grpc.gen.ClientStreaming) {MethodDescriptor.MethodType.CLIENT_STREAMING }
  @if(methodType == akka.grpc.gen.ServerStreaming) { MethodDescriptor.MethodType.SERVER_STREAMING }
  @if(methodType == akka.grpc.gen.BidiStreaming) {MethodDescriptor.MethodType.BIDI_STREAMING }
}
