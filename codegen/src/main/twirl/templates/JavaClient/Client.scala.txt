@*
 * Copyright (C) 2018-2023 Lightbend Inc. <https://www.lightbend.com>
 *@

@(service: akka.grpc.gen.javadsl.Service)

@akka.grpc.gen.Constants.DoNotEditComment
package @service.packageName;

import akka.actor.ClassicActorSystemProvider;
import akka.stream.Materializer;
import akka.stream.SystemMaterializer;

import akka.grpc.internal.*;
import akka.grpc.GrpcChannel;
import akka.grpc.GrpcClientCloseException;
import akka.grpc.GrpcClientSettings;
import akka.grpc.javadsl.AkkaGrpcClient;

import io.grpc.MethodDescriptor;

import static @{service.packageName}.@{service.name}.Serializers.*;

import scala.concurrent.ExecutionContext;

import akka.grpc.AkkaGrpcGenerated;

@GenMethodImports(service)

@@AkkaGrpcGenerated
public abstract class @{service.name}Client extends @{service.name}ClientPowerApi implements @{service.name}, AkkaGrpcClient {
  public static final @{service.name}Client create(GrpcClientSettings settings, ClassicActorSystemProvider sys) {
    return new Default@{service.name}Client(akka.grpc.GrpcChannel$.MODULE$.apply(settings, sys), true, sys);
  }

  public static final @{service.name}Client create(GrpcChannel channel, ClassicActorSystemProvider sys) {
    return new Default@{service.name}Client(channel, false, sys);
  }

  @@AkkaGrpcGenerated
  protected final static class Default@{service.name}Client extends @{service.name}Client {

      private final GrpcChannel channel;
      private final boolean isChannelOwned;
      private final GrpcClientSettings settings;
      private final io.grpc.CallOptions options;
      private final Materializer mat;
      private final ExecutionContext ec;

      private Default@{service.name}Client(GrpcChannel channel, boolean isChannelOwned, ClassicActorSystemProvider sys) {
        this.channel = channel;
        this.isChannelOwned = isChannelOwned;
        this.settings = channel.settings();
        this.mat = SystemMaterializer.get(sys).materializer();
        this.ec = sys.classicSystem().dispatcher();
        this.options = NettyClientUtils.callOptions(settings);

        sys.classicSystem().getWhenTerminated().whenComplete((v, e) -> close());
      }

  @for(method <- service.methods) {
    @if(method.methodType == akka.grpc.gen.Unary) {
      private final SingleResponseRequestBuilder<@method.inputTypeUnboxed, @method.outputTypeUnboxed> @{method.name}RequestBuilder(akka.grpc.internal.InternalChannel channel){
        return new JavaUnaryRequestBuilder<>(@{method.name}Descriptor, channel, options, settings, ec);
      }
    } else {
      @if(method.methodType == akka.grpc.gen.ClientStreaming){
        private final SingleResponseRequestBuilder<akka.stream.javadsl.Source<@method.inputTypeUnboxed, akka.NotUsed>, @method.outputTypeUnboxed> @{method.name}RequestBuilder(akka.grpc.internal.InternalChannel channel){
          return new JavaClientStreamingRequestBuilder<>(
                               @{method.name}Descriptor, channel, options, settings, mat, ec);
        }
      } else if(method.methodType == akka.grpc.gen.ServerStreaming){
        private final StreamResponseRequestBuilder<@method.inputTypeUnboxed, @method.outputTypeUnboxed> @{method.name}RequestBuilder(akka.grpc.internal.InternalChannel channel){
          return new JavaServerStreamingRequestBuilder<>(
                               @{method.name}Descriptor, channel, options, settings, ec);
        }
      } else if(method.methodType == akka.grpc.gen.BidiStreaming){
        private final StreamResponseRequestBuilder<akka.stream.javadsl.Source<@method.inputTypeUnboxed, akka.NotUsed>, @method.outputTypeUnboxed> @{method.name}RequestBuilder(akka.grpc.internal.InternalChannel channel){
          return new JavaBidirectionalStreamingRequestBuilder<>(
                               @{method.name}Descriptor, channel, options, settings, ec);
        }
      }
    }
  }

      @for(method <- service.methods) {

        /**
         * For access to method metadata use the parameterless version of @{method.name}
         */
        public @{method.getReturnType} @{method.name}(@{method.getParameterType} request) {
          return @{method.name}().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer @{method.name}(@method.inputTypeUnboxed) if possible.
         */
        @if(method.methodType == akka.grpc.gen.Unary) {
          public SingleResponseRequestBuilder<@method.inputTypeUnboxed, @method.outputTypeUnboxed> @{method.name}()
        }else if(method.methodType == akka.grpc.gen.ClientStreaming){
          public SingleResponseRequestBuilder<akka.stream.javadsl.Source<@method.inputTypeUnboxed, akka.NotUsed>, @method.outputTypeUnboxed> @{method.name}()
        }else if(method.methodType == akka.grpc.gen.ServerStreaming){
          public StreamResponseRequestBuilder<@method.inputTypeUnboxed, @method.outputTypeUnboxed> @{method.name}()
        }else if(method.methodType == akka.grpc.gen.BidiStreaming){
          public StreamResponseRequestBuilder<akka.stream.javadsl.Source<@method.inputTypeUnboxed, akka.NotUsed>, @method.outputTypeUnboxed> @{method.name}()
        }
        {
          return @{method.name}RequestBuilder(channel.internalChannel());
        }
      }

      @for(method <- service.methods) {
        private static MethodDescriptor<@method.inputTypeUnboxed, @method.outputTypeUnboxed> @{method.name}Descriptor =
          MethodDescriptor.<@method.inputTypeUnboxed, @method.outputTypeUnboxed>newBuilder()
            .setType(@mapMethodType(method.methodType))
            .setFullMethodName(MethodDescriptor.generateFullMethodName("@service.grpcName", "@method.grpcName"))
            .setRequestMarshaller(new ProtoMarshaller<@method.inputTypeUnboxed>(@method.deserializer.name))
            .setResponseMarshaller(new ProtoMarshaller<@method.outputTypeUnboxed>(@method.serializer.name))
            .setSampledToLocalTracing(true)
            .build();
        }

      /**
       * Initiates a shutdown in which preexisting and new calls are cancelled.
       */
      public java.util.concurrent.CompletionStage<akka.Done> close() {
        if (isChannelOwned) {
          return channel.closeCS();
        } else {
          throw new GrpcClientCloseException();
        }
      }

     /**
      * Returns a CompletionState that completes successfully when shutdown via close()
      * or exceptionally if a connection can not be established after maxConnectionAttempts.
      */
      public java.util.concurrent.CompletionStage<akka.Done> closed() {
        return channel.closedCS();
      }
  }

}


@mapMethodType(methodType: akka.grpc.gen.MethodType) = {
  @if(methodType == akka.grpc.gen.Unary) { MethodDescriptor.MethodType.UNARY }
  @if(methodType == akka.grpc.gen.ClientStreaming) {MethodDescriptor.MethodType.CLIENT_STREAMING }
  @if(methodType == akka.grpc.gen.ServerStreaming) { MethodDescriptor.MethodType.SERVER_STREAMING }
  @if(methodType == akka.grpc.gen.BidiStreaming) {MethodDescriptor.MethodType.BIDI_STREAMING }
}
