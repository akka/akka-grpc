@*
 * Copyright (C) 2018-2019 Lightbend Inc. <https://www.lightbend.com>
 *@

@(service: akka.grpc.gen.javadsl.Service)

@akka.grpc.gen.Constants.DoNotEditComment
package @service.packageName;

import akka.annotation.*;
import akka.grpc.internal.*;
import akka.grpc.GrpcClientSettings;
import akka.grpc.javadsl.AkkaGrpcClient;
import akka.grpc.javadsl.SingleResponseRequestBuilder;
import akka.grpc.javadsl.StreamResponseRequestBuilder;
import akka.stream.ActorMaterializer;
import akka.stream.Materializer;
import akka.stream.OverflowStrategy;
import akka.stream.Materializer;

import io.grpc.*;
import io.grpc.stub.*;

import static @{service.packageName}.@{service.name}.Serializers.*;


import scala.concurrent.ExecutionContext;
import scala.compat.java8.FutureConverters;
import scala.concurrent.Future;
import scala.concurrent.Promise;

public abstract class  @{service.name}ClientPowerApi {
  @for(method <- service.methods) {
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer @{method.name}(@method.inputTypeUnboxed) if possible.
     */
    @if(method.methodType == akka.grpc.gen.Unary) {
      public SingleResponseRequestBuilder<@method.inputTypeUnboxed, @method.outputTypeUnboxed> @{method.name}()
    }else if(method.methodType == akka.grpc.gen.ClientStreaming){
      public SingleResponseRequestBuilder<akka.stream.javadsl.Source<@method.inputTypeUnboxed, akka.NotUsed>, @method.outputTypeUnboxed> @{method.name}()
    }else if(method.methodType == akka.grpc.gen.ServerStreaming){
      public StreamResponseRequestBuilder<@method.inputTypeUnboxed, @method.outputTypeUnboxed> @{method.name}()
    }else if(method.methodType == akka.grpc.gen.BidiStreaming){
      public StreamResponseRequestBuilder<akka.stream.javadsl.Source<@method.inputTypeUnboxed, akka.NotUsed>, @method.outputTypeUnboxed> @{method.name}()
    }
    {
        throw new java.lang.UnsupportedOperationException();
    }
  }
}