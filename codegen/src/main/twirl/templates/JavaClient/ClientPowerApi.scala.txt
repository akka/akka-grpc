@*
 * Copyright (C) 2018-2025 Lightbend Inc. <https://www.lightbend.com>
 *@

@(service: akka.grpc.gen.javadsl.Service)

@akka.grpc.gen.Constants.DoNotEditComment
package @service.packageName;

import akka.grpc.AkkaGrpcGenerated;

@GenMethodImports(service)

@@AkkaGrpcGenerated
public abstract class @{service.name}ClientPowerApi {
  @for(method <- service.methods) {
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer @{method.name}(@method.inputTypeUnboxed) if possible.
     */
    @if(method.methodType == akka.grpc.gen.Unary) {
      @if(method.asyncReturnValue) {
        public SingleResponseRequestBuilder<@method.inputTypeUnboxed, @method.outputTypeUnboxed> @{method.name}()
      } else {
        public SingleBlockingResponseRequestBuilder<@method.inputTypeUnboxed, @method.outputTypeUnboxed> @{method.name}()
      }
    } else if(method.methodType == akka.grpc.gen.ClientStreaming){
      @if(method.asyncReturnValue) {
        public SingleResponseRequestBuilder<akka.stream.javadsl.Source<@method.inputTypeUnboxed, akka.NotUsed>, @method.outputTypeUnboxed> @{method.name}()
      } else {
        public SingleBlockingResponseRequestBuilder<akka.stream.javadsl.Source<@method.inputTypeUnboxed, akka.NotUsed>, @method.outputTypeUnboxed> @{method.name}()
      }
    } else if(method.methodType == akka.grpc.gen.ServerStreaming){
      public StreamResponseRequestBuilder<@method.inputTypeUnboxed, @method.outputTypeUnboxed> @{method.name}()
    } else if(method.methodType == akka.grpc.gen.BidiStreaming){
      public StreamResponseRequestBuilder<akka.stream.javadsl.Source<@method.inputTypeUnboxed, akka.NotUsed>, @method.outputTypeUnboxed> @{method.name}()
    }
    {
        throw new java.lang.UnsupportedOperationException();
    }
  }
}
