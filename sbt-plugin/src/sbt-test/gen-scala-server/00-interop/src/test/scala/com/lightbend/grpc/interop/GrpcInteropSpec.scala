package com.lightbend.grpc.interop

import java.io.InputStream

import scala.concurrent.{ExecutionContext, Future}
import akka.http.scaladsl.model.{HttpRequest, HttpResponse, StatusCodes}
import akka.http.grpc.Grpc
import akka.stream.Materializer
import io.grpc.ManagedChannel
import io.grpc.testing.integration2.{ChannelBuilder, ClientTester, Settings}
import org.scalatest.WordSpec

// Generated by our plugin
import io.grpc.testing.integration.test.TestServiceServiceHandler

class GrpcInteropSpec extends WordSpec with GrpcInteropTests {

  javaGrpcTests(AkkaHttpClientProvider)
  akkaGrpcTests(AkkaHttpServerProvider, GrpcJavaClientTesterProvider)
  akkaGrpcTests(AkkaHttpServerProvider, AkkaHttpClientProvider)

  object AkkaHttpServerProvider extends AkkaHttpServerProvider {
    val serverHandlerFactory: Materializer => ExecutionContext => PartialFunction[HttpRequest, Future[HttpResponse]] =
      implicit mat => implicit ec => TestServiceServiceHandler(new TestServiceImpl())
  }

  object AkkaHttpClientProvider extends AkkaClientTestProvider {

    val pendingCases =
      Set(
        "large_unary",
        "empty_unary",
        "ping_pong",
        "empty_stream",
        "client_streaming",
        "server_streaming",
        "cancel_after_begin",
        "cancel_after_first_response",
        "timeout_on_sleeping_server",
        "custom_metadata",
        "status_code_and_message",
        "unimplemented_method",
        "client_compressed_unary",
        "client_compressed_streaming",
        "server_compressed_unary",
        "server_compressed_streaming",
        "unimplemented_service",
      )

    val clientTesterFactory: Settings => ClientTester = settings => new AkkaGrpcClientTester(settings)
  }
}

class AkkaGrpcClientTester(val settings: Settings) extends ClientTester {

  private var channel: ManagedChannel = null
  // TODO add generated one
//  private var stub: TestServiceAkkaGrpc.TestServiceStub = null

  def createChannel(): ManagedChannel = ChannelBuilder.buildChannel(settings)

  def setUp(): Unit = {
//    channel = createChannel()
//    stub = TestServiceAkkaGrpc.stub(channel)
  }

  def tearDown(): Unit = {
//    if (channel != null) channel.shutdown()
  }

  def emptyUnary(): Unit = {
    throw new RuntimeException("Not implemented!")
  }

  def cacheableUnary(): Unit = {
    throw new RuntimeException("Not implemented!")
  }

  def largeUnary(): Unit = {
    throw new RuntimeException("Not implemented!")
  }

  def clientCompressedUnary(): Unit = {
    throw new RuntimeException("Not implemented!")
  }

  def serverCompressedUnary(): Unit = {
    throw new RuntimeException("Not implemented!")
  }

  def clientStreaming(): Unit = {
    throw new RuntimeException("Not implemented!")
  }

  def clientCompressedStreaming(): Unit = {
    throw new RuntimeException("Not implemented!")
  }

  def serverStreaming(): Unit = {
    throw new RuntimeException("Not implemented!")
  }

  def serverCompressedStreaming(): Unit = {
    throw new RuntimeException("Not implemented!")
  }

  def pingPong(): Unit = {
    throw new RuntimeException("Not implemented!")
  }

  def emptyStream(): Unit = {
    throw new RuntimeException("Not implemented!")
  }

  def computeEngineCreds(serviceAccount: String, oauthScope: String): Unit = {
    throw new RuntimeException("Not implemented!")
  }

  def serviceAccountCreds(jsonKey: String, credentialsStream: InputStream, authScope: String): Unit = {
    throw new RuntimeException("Not implemented!")
  }

  def jwtTokenCreds(serviceAccountJson: InputStream): Unit = {
    throw new RuntimeException("Not implemented!")
  }

  def oauth2AuthToken(jsonKey: String, credentialsStream: InputStream, authScope: String): Unit = {
    throw new RuntimeException("Not implemented!")
  }

  def perRpcCreds(jsonKey: String, credentialsStream: InputStream, oauthScope: String): Unit = {
    throw new RuntimeException("Not implemented!")
  }

  def customMetadata(): Unit = {
    throw new RuntimeException("Not implemented!")
  }

  def statusCodeAndMessage(): Unit = {
    throw new RuntimeException("Not implemented!")
  }

  def unimplementedMethod(): Unit = {
    throw new RuntimeException("Not implemented!")
  }

  def unimplementedService(): Unit = {
    throw new RuntimeException("Not implemented!")
  }

  def cancelAfterBegin(): Unit = {
    throw new RuntimeException("Not implemented!")
  }

  def cancelAfterFirstResponse(): Unit = {
    throw new RuntimeException("Not implemented!")
  }

  def timeoutOnSleepingServer(): Unit = {
    throw new RuntimeException("Not implemented!")
  }

}

