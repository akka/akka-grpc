package com.lightbend.grpc.interop;

import java.util.concurrent.CompletionStage;
import java.util.concurrent.CompletableFuture;

import akka.stream.Materializer;
import akka.stream.javadsl.Flow;
import akka.stream.javadsl.Source;
import com.google.protobuf.ByteString;
import com.google.protobuf.EmptyProtos;
import com.google.protobuf.empty.Empty;

// Generated by our plugin
import io.grpc.testing.integration.Messages;
import io.grpc.testing.integration.Messages.*;
import io.grpc.testing.integration.TestServiceService;

// Implementation of the generated interface
public class JavaTestServiceImpl implements TestServiceService {
  private final Materializer mat;

  private static final Flow<ResponseParameters, StreamingOutputCallResponse, ?> parametersToResponseFlow =
    Flow.<ResponseParameters>create()
      .map(parameters ->
      StreamingOutputCallResponse.newBuilder()
        .setPayload(
          Payload.newBuilder()
            .setBody(ByteString.copyFrom(new byte[parameters.getSize()]))
            .build()
        )
        .build()
    );

  public JavaTestServiceImpl(Materializer mat) {
    this.mat = mat;
  }

  @Override
  public CompletionStage<EmptyProtos.Empty> emptyCall(EmptyProtos.Empty in) {
    return CompletableFuture.completedFuture(EmptyProtos.Empty.newBuilder().build());
  }

  @Override
  public CompletionStage<SimpleResponse> unaryCall(SimpleRequest in) {
    return CompletableFuture.completedFuture(
      SimpleResponse.newBuilder()
        .setPayload(Payload.newBuilder()
          .setType(in.getPayload().getType())
          .setBody(ByteString.copyFrom(new byte[in.getResponseSize()]))
          .build())
        .build()
    );
  }

  @Override
  public CompletionStage<SimpleResponse> cacheableUnaryCall(SimpleRequest in) {
    return unaryCall(in);
  }

  @Override
  public Source<StreamingOutputCallResponse, Object> streamingOutputCall(StreamingOutputCallRequest in) {
    return Source.from(in.getResponseParametersList())
      .via(parametersToResponseFlow)
      .mapMaterializedValue(x -> x);
  }

  @Override
  public CompletionStage<StreamingInputCallResponse> streamingInputCall(Source<StreamingInputCallRequest, Object> in) {
    return in
      .map(i -> i.getPayload().getBody().size())
      .runFold(0, (Integer x, Integer y)->x+y, mat)
      .thenApply(sum -> StreamingInputCallResponse.newBuilder().setAggregatedPayloadSize(sum).build());
  }


  @Override
  public Source<StreamingOutputCallResponse, Object> fullDuplexCall(Source<StreamingOutputCallRequest, Object> in) {
    return in
      .mapConcat(r -> r.getResponseParametersList())
      .via(parametersToResponseFlow);
  }


  @Override
  public Source<StreamingOutputCallResponse, Object> halfDuplexCall(Source<StreamingOutputCallRequest, Object> in) {
    return null;
  }

  @Override
  public CompletionStage<EmptyProtos.Empty> unimplementedCall(EmptyProtos.Empty in) {
     throw new UnsupportedOperationException();
  }

}
