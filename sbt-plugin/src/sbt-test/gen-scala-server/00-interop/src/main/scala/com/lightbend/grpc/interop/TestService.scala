package com.lightbend.grpc.interop

import scala.concurrent.ExecutionContext
import scala.concurrent.Future
import scala.reflect.ClassTag
import akka.NotUsed
import akka.http.grpc._
import akka.http.scaladsl.model.{HttpRequest, HttpResponse, StatusCodes}
import akka.http.scaladsl.model.Uri.Path
import akka.http.scaladsl.model.Uri.Path.Segment
import akka.stream.Materializer
import akka.stream.scaladsl.Source
import com.google.protobuf.{ByteString, EmptyProtos}
import com.google.protobuf.empty.Empty
import io.grpc.testing.integration.Messages

// Generated by our plugin
import io.grpc.testing.integration.test.TestServiceService
import io.grpc.testing.integration.messages._

// TODO this implementation should eventually be independent of the GoogleTestServiceImpl
// and move to the 'server' project
class TestServiceImpl(implicit ec: ExecutionContext) extends TestServiceService {
  override def emptyCall(req: Empty) = Future.successful(Empty())
  override def unaryCall(req: SimpleRequest): Future[SimpleResponse] = Future.successful(
    SimpleResponse(
      Some(Payload(req.responseType, ByteString.copyFrom(new Array[Byte](req.responseSize))))
    )
  )
  override def cacheableUnaryCall(in: SimpleRequest): Future[SimpleResponse] = ???
  override def fullDuplexCall(in: Source[StreamingOutputCallRequest, NotUsed]): Source[StreamingOutputCallResponse,Any] = ???
  override def halfDuplexCall(in: Source[StreamingOutputCallRequest, NotUsed]): Source[StreamingOutputCallResponse,Any] = ???
  override def streamingInputCall(in: Source[StreamingInputCallRequest,NotUsed]): Future[StreamingInputCallResponse] = ???
  override def streamingOutputCall(in: StreamingOutputCallRequest): Source[StreamingOutputCallResponse, Any] = ???
  override def unimplementedCall(in: Empty): Future[Empty] = ???

  // TODO the below would be part of the generated trait
  def toHandler()(implicit mat: Materializer): PartialFunction[HttpRequest, Future[HttpResponse]] = {
    implicit val ec: ExecutionContext = mat.executionContext

    val emptySerializer = new ScalapbProtobufSerializer(Empty.messageCompanion)
    val requestSerializer = new ScalapbProtobufSerializer(SimpleRequest.messageCompanion)
    val responseSerializer = new ScalapbProtobufSerializer(SimpleResponse.messageCompanion)

    def handle(request: HttpRequest, method: String): Future[HttpResponse] = method match {
      case "EmptyCall" ⇒
        GrpcRuntimeMarshalling.unmarshall(request, emptySerializer, mat)
          .flatMap(emptyCall)
          .map(e ⇒ GrpcRuntimeMarshalling.marshal(e, emptySerializer, mat))
      case "UnaryCall" ⇒
        GrpcRuntimeMarshalling.unmarshall(request, requestSerializer, mat)
          .flatMap(unaryCall)
          .map(e ⇒ GrpcRuntimeMarshalling.marshal(e, responseSerializer, mat))
      case _ ⇒
        Future.successful(HttpResponse(StatusCodes.NotFound))
    }

    Function.unlift((req: HttpRequest) ⇒ req.uri.path match {
      case Path.Slash(Segment("grpc.testing.TestService", Path.Slash(Segment(method, Path.Empty)))) ⇒ Some(handle(req, method))
      case _ ⇒ None
    })
  }
}